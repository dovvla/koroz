[package]
name = "devjam"
version = "0.1.0"
edition = "2021"

[dependencies]
devjam-common = { path = "../devjam-common", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
tokio = { workspace = true, features = [
    "macros",
    "rt",
    "rt-multi-thread",
    "net",
    "signal",
    "sync",
    "process",
] }

clap = { workspace = true, features = ["derive"] }
bytes = "1.9.0"
epoll = "4.3.3"

dns-parser = { version = "0.8.0" }
nix = { version = "0.29.0", features = ["time"] }

warp = "0.3.7"
serde = { version = "1.0.215", features = ["serde_derive"] }
chrono = { version = "0.4.39", features = ["serde"] }
prometheus = "0.13.4"
lazy_static = "1.5.0"
sqlx = { version = "0.8", features = [
    "runtime-tokio",
    "tls-native-tls",
    "postgres",
    "derive",
    "macros",
    "chrono",
] }

config = "0.14.0"

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
devjam-ebpf = { path = "../devjam-ebpf" }

[[bin]]
name = "devjam"
path = "src/main.rs"
